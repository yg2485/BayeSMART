as.matrix(info.i[, c("x", "y")])
})
cell_type <- lapply(xys_starmap, function(info.i){
as.matrix(info.i[, c("cell")])
})
annotations <- lapply(xys_starmap, function(info.i){
as.matrix(info.i[, c("annotation")])
})
x_grid <- 25
y_grid <- 20
profiles_sc <- profiles_sc(cnts, xys, cell_type, x_grid = x_grid, y_grid = y_grid, adjacent_slides = TRUE)
profiles_sc <- function(cnts, xys, cell_type, x_grid = 30, y_grid = 30, adjacent_slides = TRUE, gene_select = "sparkx", n_gene = 2000, pcn = 3){
profiles <- list()
for (s in 1:length(xys)){
profiles[[s]] <- get_profiles(t(cnts[[s]]), xys[[s]], cell_type[[s]], x_grid = x_grid, y_grid = y_grid)
}
# concat the profiles and proceed
all_cell_type <- c()
for (s in 1:length(xys)){
all_cell_type <- c(all_cell_type, cell_type[[s]])
}
unique_cell_types <- unique(all_cell_type)
V <- matrix(ncol = length(unique_cell_types), nrow = 0)
G <- matrix(ncol = 8, nrow = 0)
G_origin <- matrix(ncol = 8, nrow = 0)
each_length <-c()
list_count <- NULL
for (s in 1:length(xys)){
res = profiles[[s]]
M1 <- res$M
V1 <- res$V
new_V <- matrix(0, nrow = nrow(V1), ncol = length(unique_cell_types))
colnames(new_V) <- cell_types
indices <- match(cell_types, colnames(V1))
for (i in seq_along(indices)) {
index <- indices[i]
if (!is.na(index)) {  # If the name is found in the column names of V
new_V[, i] <- V1[, index]
}
}
G1 <- res$G
spot_xy <- res$spot_xy
each_length <- c(each_length, nrow(spot_xy))
list_count[[s]] <- t(M1)
G_origin <- rbind(G_origin, G1)
if (s > 1){
non_zero_indices <- G1 != 0
G1[non_zero_indices] <- G1[non_zero_indices] + sum(each_length[1:(s-1)])
}
# store the matrix
V <- rbind(V, new_V)
G <- rbind(G, G1)
}
print("Done with getting the image profile...")
if (adjacent_slides == TRUE){
### add adjacent slides information to G
matt <- generate_adjacent_matrix(x_grid, y_grid)
G_all <- matrix(0, nrow = length(matt), ncol = 8)
for (i in 1:length(matt)){
v <- matt[[i]]
if (length(v) < 8){
v <- c(v, rep(0, 8 - length(v)))
}
G_all[i,] <- v
}
non_zero_indices <- G_all != 0
empty_spots_all <- c()
G_connected <- matrix(ncol = 10, nrow = 0)
num_of_grid <- x_grid * y_grid
for (s in 1:length(xys)){
G1 <- G_all
G1[non_zero_indices] <- G1[non_zero_indices] + num_of_grid*(s-1)
empty_spot <- profiles[[s]]$empty_spot
if (s == 1){
G1 <- cbind(G1, rep(0, num_of_grid), seq(num_of_grid*s + 1, num_of_grid*s + num_of_grid))
}else if (s == length(xys)){
G1 <- cbind(G1, seq(num_of_grid*(s-2)+1, num_of_grid*(s-2)+num_of_grid), rep(0, num_of_grid))
}else{
G1 <- cbind(G1, seq(num_of_grid*(s-2)+1, num_of_grid*(s-2)+num_of_grid), seq(num_of_grid*s + 1, num_of_grid*s + num_of_grid))
}
G_connected <- rbind(G_connected, G1)
empty_spots_all <- c(empty_spots_all, (empty_spot + num_of_grid*(s-1)))
}
list_of_rows <- apply(G_connected, 1, function(x) x[x != 0])
G <- adjust_matrix(list_of_rows, empty_spots_all, ncol = 10)
}
print("Done with getting the geospatial profile...")
Y <- batch_remove(list_count, xys = xys, gene_select = gene_select, n_gene = n_gene, pcn = pcn)
print("Done with getting the molecular profile...")
return(list(Y = Y, V = V, G = G, G_origin = G_origin))
}
x_grid <- 25
y_grid <- 20
profiles_sc <- profiles_sc(cnts, xys, cell_type, x_grid = x_grid, y_grid = y_grid, adjacent_slides = TRUE)
profiles <- list()
for (s in 1:length(xys)){
profiles[[s]] <- get_profiles(t(cnts[[s]]), xys[[s]], cell_type[[s]], x_grid = x_grid, y_grid = y_grid)
}
# concat the profiles and proceed
all_cell_type <- c()
for (s in 1:length(xys)){
all_cell_type <- c(all_cell_type, cell_type[[s]])
}
unique_cell_types <- unique(all_cell_type)
V <- matrix(ncol = length(unique_cell_types), nrow = 0)
G <- matrix(ncol = 8, nrow = 0)
G_origin <- matrix(ncol = 8, nrow = 0)
each_length <-c()
list_count <- NULL
for (s in 1:length(xys)){
res = profiles[[s]]
M1 <- res$M
V1 <- res$V
new_V <- matrix(0, nrow = nrow(V1), ncol = length(unique_cell_types))
colnames(new_V) <- cell_types
indices <- match(cell_types, colnames(V1))
for (i in seq_along(indices)) {
index <- indices[i]
if (!is.na(index)) {  # If the name is found in the column names of V
new_V[, i] <- V1[, index]
}
}
G1 <- res$G
spot_xy <- res$spot_xy
each_length <- c(each_length, nrow(spot_xy))
list_count[[s]] <- t(M1)
G_origin <- rbind(G_origin, G1)
if (s > 1){
non_zero_indices <- G1 != 0
G1[non_zero_indices] <- G1[non_zero_indices] + sum(each_length[1:(s-1)])
}
# store the matrix
V <- rbind(V, new_V)
G <- rbind(G, G1)
}
profiles_sc <- function(cnts, xys, cell_type, x_grid = 30, y_grid = 30, adjacent_slides = TRUE, gene_select = "sparkx", n_gene = 2000, pcn = 3){
profiles <- list()
for (s in 1:length(xys)){
profiles[[s]] <- get_profiles(t(cnts[[s]]), xys[[s]], cell_type[[s]], x_grid = x_grid, y_grid = y_grid)
}
# concat the profiles and proceed
all_cell_type <- c()
for (s in 1:length(xys)){
all_cell_type <- c(all_cell_type, cell_type[[s]])
}
unique_cell_types <- unique(all_cell_type)
V <- matrix(ncol = length(unique_cell_types), nrow = 0)
G <- matrix(ncol = 8, nrow = 0)
G_origin <- matrix(ncol = 8, nrow = 0)
each_length <-c()
list_count <- NULL
for (s in 1:length(xys)){
res = profiles[[s]]
M1 <- res$M
V1 <- res$V
new_V <- matrix(0, nrow = nrow(V1), ncol = length(unique_cell_types))
colnames(new_V) <- unique_cell_types
indices <- match(unique_cell_types, colnames(V1))
for (i in seq_along(indices)) {
index <- indices[i]
if (!is.na(index)) {  # If the name is found in the column names of V
new_V[, i] <- V1[, index]
}
}
G1 <- res$G
spot_xy <- res$spot_xy
each_length <- c(each_length, nrow(spot_xy))
list_count[[s]] <- t(M1)
G_origin <- rbind(G_origin, G1)
if (s > 1){
non_zero_indices <- G1 != 0
G1[non_zero_indices] <- G1[non_zero_indices] + sum(each_length[1:(s-1)])
}
# store the matrix
V <- rbind(V, new_V)
G <- rbind(G, G1)
}
print("Done with getting the image profile...")
if (adjacent_slides == TRUE){
### add adjacent slides information to G
matt <- generate_adjacent_matrix(x_grid, y_grid)
G_all <- matrix(0, nrow = length(matt), ncol = 8)
for (i in 1:length(matt)){
v <- matt[[i]]
if (length(v) < 8){
v <- c(v, rep(0, 8 - length(v)))
}
G_all[i,] <- v
}
non_zero_indices <- G_all != 0
empty_spots_all <- c()
G_connected <- matrix(ncol = 10, nrow = 0)
num_of_grid <- x_grid * y_grid
for (s in 1:length(xys)){
G1 <- G_all
G1[non_zero_indices] <- G1[non_zero_indices] + num_of_grid*(s-1)
empty_spot <- profiles[[s]]$empty_spot
if (s == 1){
G1 <- cbind(G1, rep(0, num_of_grid), seq(num_of_grid*s + 1, num_of_grid*s + num_of_grid))
}else if (s == length(xys)){
G1 <- cbind(G1, seq(num_of_grid*(s-2)+1, num_of_grid*(s-2)+num_of_grid), rep(0, num_of_grid))
}else{
G1 <- cbind(G1, seq(num_of_grid*(s-2)+1, num_of_grid*(s-2)+num_of_grid), seq(num_of_grid*s + 1, num_of_grid*s + num_of_grid))
}
G_connected <- rbind(G_connected, G1)
empty_spots_all <- c(empty_spots_all, (empty_spot + num_of_grid*(s-1)))
}
list_of_rows <- apply(G_connected, 1, function(x) x[x != 0])
G <- adjust_matrix(list_of_rows, empty_spots_all, ncol = 10)
}
print("Done with getting the geospatial profile...")
Y <- batch_remove(list_count, xys = xys, gene_select = gene_select, n_gene = n_gene, pcn = pcn)
print("Done with getting the molecular profile...")
return(list(Y = Y, V = V, G = G, G_origin = G_origin))
}
profiles_sc <- profiles_sc(cnts, xys, cell_type, x_grid = x_grid, y_grid = y_grid, adjacent_slides = TRUE)
Y <- profiles_sc[['Y']]
########## BayeSMART
K <- 4
w <- 0.1
f_val <- 1
Y <- profiles_sc[['Y']]
V <- profiles_sc[['V']]
G <- profiles_sc[['G']]
result <- run.BayeSMART(V, Y, G, n_cluster = K, f_val = f_val, w = w, lambda = 0.009)
spatial_domain <- get.spatial.domain(result)
# calculate ARI
library(mclust)
library(aricode)
scores_ARI <- c()
for (s in 1:3){
l = each_length[s]
res = results[[s]]
annotation <- annotations[[s]]
if (s == 1){
domains <- spatial_domain[1:l]
G1 <- G_orgin[1:l, ]
}else{
sum_ = sum(each_length[1: (s-1)])
domains <- spatial_domain[(sum_ + 1): (sum_ + l)]
G1 <- G_orgin[(sum_ + 1): (sum_ + l), ]
}
spatial_domain_refined <- refine.cluster(G1, domains, area_unit = 3)
# spatial_domain_refined <- domains
cell_z <- spatial_domain_refined[res$cell_assign]
ari_score <- adjustedRandIndex(cell_z, annotation)
scores_ARI <- c(scores_ARI, ari_score)
}
profiles_sc <- function(cnts, xys, cell_type, x_grid = 30, y_grid = 30, adjacent_slides = TRUE, gene_select = "sparkx", n_gene = 2000, pcn = 3){
profiles <- list()
for (s in 1:length(xys)){
profiles[[s]] <- get_profiles(t(cnts[[s]]), xys[[s]], cell_type[[s]], x_grid = x_grid, y_grid = y_grid)
}
# concat the profiles and proceed
all_cell_type <- c()
for (s in 1:length(xys)){
all_cell_type <- c(all_cell_type, cell_type[[s]])
}
unique_cell_types <- unique(all_cell_type)
V <- matrix(ncol = length(unique_cell_types), nrow = 0)
G <- matrix(ncol = 8, nrow = 0)
G_origin <- matrix(ncol = 8, nrow = 0)
each_length <-c()
list_count <- NULL
spot_xys <- NULL
cell_assignment <- NULL
for (s in 1:length(xys)){
res = profiles[[s]]
M1 <- res$M
V1 <- res$V
new_V <- matrix(0, nrow = nrow(V1), ncol = length(unique_cell_types))
colnames(new_V) <- unique_cell_types
indices <- match(unique_cell_types, colnames(V1))
for (i in seq_along(indices)) {
index <- indices[i]
if (!is.na(index)) {  # If the name is found in the column names of V
new_V[, i] <- V1[, index]
}
}
G1 <- res$G
spot_xy <- res$spot_xy
each_length <- c(each_length, nrow(spot_xy))
list_count[[s]] <- t(M1)
spot_xys[[s]] <- spot_xy
cell_assignment[[s]] <- res$cell_assign
G_origin <- rbind(G_origin, G1)
if (s > 1){
non_zero_indices <- G1 != 0
G1[non_zero_indices] <- G1[non_zero_indices] + sum(each_length[1:(s-1)])
}
# store the matrix
V <- rbind(V, new_V)
G <- rbind(G, G1)
}
print("Done with getting the image profile...")
if (adjacent_slides == TRUE){
### add adjacent slides information to G
matt <- generate_adjacent_matrix(x_grid, y_grid)
G_all <- matrix(0, nrow = length(matt), ncol = 8)
for (i in 1:length(matt)){
v <- matt[[i]]
if (length(v) < 8){
v <- c(v, rep(0, 8 - length(v)))
}
G_all[i,] <- v
}
non_zero_indices <- G_all != 0
empty_spots_all <- c()
G_connected <- matrix(ncol = 10, nrow = 0)
num_of_grid <- x_grid * y_grid
for (s in 1:length(xys)){
G1 <- G_all
G1[non_zero_indices] <- G1[non_zero_indices] + num_of_grid*(s-1)
empty_spot <- profiles[[s]]$empty_spot
if (s == 1){
G1 <- cbind(G1, rep(0, num_of_grid), seq(num_of_grid*s + 1, num_of_grid*s + num_of_grid))
}else if (s == length(xys)){
G1 <- cbind(G1, seq(num_of_grid*(s-2)+1, num_of_grid*(s-2)+num_of_grid), rep(0, num_of_grid))
}else{
G1 <- cbind(G1, seq(num_of_grid*(s-2)+1, num_of_grid*(s-2)+num_of_grid), seq(num_of_grid*s + 1, num_of_grid*s + num_of_grid))
}
G_connected <- rbind(G_connected, G1)
empty_spots_all <- c(empty_spots_all, (empty_spot + num_of_grid*(s-1)))
}
list_of_rows <- apply(G_connected, 1, function(x) x[x != 0])
G <- adjust_matrix(list_of_rows, empty_spots_all, ncol = 10)
}
print("Done with getting the geospatial profile...")
Y <- batch_remove(list_count, xys = xys, gene_select = gene_select, n_gene = n_gene, pcn = pcn)
print("Done with getting the molecular profile...")
return(list(Y = Y, V = V, G = G, G_origin = G_origin, spot_xys = spot_xys, cell_assignment = cell_assignment))
}
source("~/Desktop/Research/iBurst/iBURST/code/BayeSMART.R")
profiles_sc <- profiles_sc(cnts, xys, cell_type, x_grid = x_grid, y_grid = y_grid, adjacent_slides = TRUE)
Y <- profiles_sc[['Y']]
V <- profiles_sc[['V']]
G <- profiles_sc[['G']]
G_origin <- profiles_sc[['G_origin']]
cell_assignment <- profiles_sc[['cell_assignment']]
result <- run.BayeSMART(V, Y, G, n_cluster = K, f_val = f_val, w = w, lambda = 0.009)
result <- run.BayeSMART(V, Y, G, n_cluster = K, f_val = f_val, w = w, lambda = 0)
spatial_domain <- get.spatial.domain(result)
domain_res <- domain_split(spatial_domain, G_origin, xys)
spot_xys <- profiles_sc[['spot_xys']]
domain_res <- domain_split(spatial_domain, G_origin, spot_xys)
# calculate ARI
library(mclust)
library(aricode)
scores_ARI <- c()
for (s in 1:3){
annotation <- annotations[[s]]
cell_z <- domain_res[[s]][cell_assignment[[s]]]
ari_score <- adjustedRandIndex(cell_z, annotation)
scores_ARI <- c(scores_ARI, ari_score)
}
scores_ARI
mean(scores_ARI)
load("/Users/yanghongguo/Desktop/Research/iBurst/data/4 dataset final/MERFISH.RData")
cnts <- cnts_merfish # a list of gene expression count matrices
xys <- lapply(xys_merfish, function(info.i){
as.matrix(info.i[, c("x", "y")])
})
cell_type <- lapply(xys_merfish, function(info.i){
as.vector(info.i[, "cell"])
})
annotations <- lapply(xys_merfish, function(info.i){
as.vector(info.i[, "annotation"])
})
x_grid <- 16
y_grid <- 16
profiles_sc <- profiles_sc(cnts, xys, cell_type, x_grid = x_grid, y_grid = y_grid, adjacent_slides = TRUE)
source("~/Desktop/Research/iBurst/iBURST/code/BayeSMART.R")
profiles_sc <- profiles_sc(cnts, xys, cell_type, x_grid = x_grid, y_grid = y_grid, adjacent_slides = TRUE)
########## BayeSMART
K <- 4
########## BayeSMART
K <- 8
w <- 0.5
f_val <- 1.1
result <- run.BayeSMART(V, Y, G, n_cluster = K, f_val = f_val, w = w, lambda = 0.009)
Y <- profiles_sc[['Y']]
V <- profiles_sc[['V']]
G <- profiles_sc[['G']]
G_origin <- profiles_sc[['G_origin']]
cell_assignment <- profiles_sc[['cell_assignment']]
spot_xys <- profiles_sc[['spot_xys']]
result <- run.BayeSMART(V, Y, G, n_cluster = K, f_val = f_val, w = w, lambda = 0.009)
spatial_domain <- get.spatial.domain(result)
domain_res <- domain_split(spatial_domain, G_origin, spot_xys)
# calculate ARI
library(mclust)
library(aricode)
scores_ARI <- c()
for (s in 1:3){
annotation <- annotations[[s]]
cell_z <- domain_res[[s]][cell_assignment[[s]]]
ari_score <- adjustedRandIndex(cell_z, annotation)
scores_ARI <- c(scores_ARI, ari_score)
}
scores_ARI
mean(scores_ARI)
cnts <- cnts_starmap
xys <- lapply(xys_starmap, function(info.i){
as.matrix(info.i[, c("x", "y")])
})
cell_type <- lapply(xys_starmap, function(info.i){
as.matrix(info.i[, c("cell")])
})
annotations <- lapply(xys_starmap, function(info.i){
as.matrix(info.i[, c("annotation")])
})
x_grid <- 25
y_grid <- 20
profiles_sc <- profiles_sc(cnts, xys, cell_type, x_grid = x_grid, y_grid = y_grid, adjacent_slides = TRUE)
########## BayeSMART
K <- 4
w <- 0.1
Y <- profiles_sc[['Y']]
source("~/Desktop/Research/iBurst/iBURST/code/BayeSMART.R")
cnts <- cnts_starmap
xys <- lapply(xys_starmap, function(info.i){
as.matrix(info.i[, c("x", "y")])
})
cell_type <- lapply(xys_starmap, function(info.i){
as.matrix(info.i[, c("cell")])
})
annotations <- lapply(xys_starmap, function(info.i){
as.matrix(info.i[, c("annotation")])
})
x_grid <- 25
y_grid <- 20
profiles_sc <- profiles_sc(cnts, xys, cell_type, x_grid = x_grid, y_grid = y_grid, adjacent_slides = TRUE)
########## BayeSMART
K <- 4
w <- 0.1
Y <- profiles_sc[['Y']]
V <- profiles_sc[['V']]
G <- profiles_sc[['G']]
G_origin <- profiles_sc[['G_origin']]
cell_assignment <- profiles_sc[['cell_assignment']]
spot_xys <- profiles_sc[['spot_xys']]
result <- run.BayeSMART(V, Y, G, n_cluster = K, w = w, lambda = 0)
spatial_domain <- get.spatial.domain(result)
domain_res <- domain_split(spatial_domain, G_origin, spot_xys)
# calculate ARI
library(mclust)
library(aricode)
scores_ARI <- c()
for (s in 1:3){
annotation <- annotations[[s]]
cell_z <- domain_res[[s]][cell_assignment[[s]]]
df_BZ <- xys[[s]]
df_BZ$annotation <- factor(cell_z)
df_BZ <- df_BZ[!is.na(df_BZ$annotation), ]
filename_1 = paste0("/Users/yanghongguo/Desktop/starmap_cell_", s,  ".png")
g2 <- ggplot(df_BZ, aes(x = x, y = y, color = annotation)) +
geom_point(size = 2) + scale_color_manual(values=c('1' = "#FFFF00", '2' = "darkorange", '3' = '#00FF00', '4' = "#7DFFFF"))+
coord_cartesian(xlim = c(0, 13000), ylim = c(0, 7000))+
theme(panel.background = element_blank())
ggsave(filename = filename_1, plot = g2, width = 6, height = 3, dpi = 300)
ari_score <- adjustedRandIndex(cell_z, annotation)
scores_ARI <- c(scores_ARI, ari_score)
}
s
annotation <- annotations[[s]]
cell_z <- domain_res[[s]][cell_assignment[[s]]]
df_BZ <- xys[[s]]
View(df_BZ)
df_BZ$annotation <- factor(cell_z)
cell_z <- domain_res[[s]][cell_assignment[[s]]]
df_BZ <- xys[[s]]
df_BZ <- data.frame(xys[[s]])
df_BZ$annotation <- factor(cell_z)
df_BZ <- df_BZ[!is.na(df_BZ$annotation), ]
filename_1 = paste0("/Users/yanghongguo/Desktop/starmap_cell_", s,  ".png")
g2 <- ggplot(df_BZ, aes(x = x, y = y, color = annotation)) +
geom_point(size = 2) + scale_color_manual(values=c('1' = "#FFFF00", '2' = "darkorange", '3' = '#00FF00', '4' = "#7DFFFF"))+
coord_cartesian(xlim = c(0, 13000), ylim = c(0, 7000))+
theme(panel.background = element_blank())
ggsave(filename = filename_1, plot = g2, width = 6, height = 3, dpi = 300)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
x_grid <- 16
y_grid <- 16
profiles_sc <- profiles_sc(cnts, xys, cell_type, x_grid = x_grid, y_grid = y_grid, adjacent_slides = TRUE)
profiles_sc <- profiles_sc(cnts, xys, cell_type, x_grid = x_grid, y_grid = y_grid, adjacent_slides = TRUE)
source("BayeSMART.R")
source("~/Desktop/Research/iBurst/iBURST/code/BayeSMART.R")
load("/Users/yanghongguo/Desktop/Research/iBurst/data/4 dataset final/MERFISH.RData")
cnts <- cnts_merfish # a list of gene expression count matrices
xys <- lapply(xys_merfish, function(info.i){
as.matrix(info.i[, c("x", "y")])
})
cell_type <- lapply(xys_merfish, function(info.i){
as.vector(info.i[, "cell"])
})
annotations <- lapply(xys_merfish, function(info.i){
as.vector(info.i[, "annotation"])
})
x_grid <- 16
y_grid <- 16
profiles_sc <- profiles_sc(cnts, xys, cell_type, x_grid = x_grid, y_grid = y_grid, adjacent_slides = TRUE)
########## BayeSMART
K <- 8
w <- 0.5
f_val <- 1.1
Y <- profiles_sc[['Y']]
V <- profiles_sc[['V']]
G <- profiles_sc[['G']]
G_origin <- profiles_sc[['G_origin']]
cell_assignment <- profiles_sc[['cell_assignment']]
spot_xys <- profiles_sc[['spot_xys']]
result <- run.BayeSMART(V, Y, G, n_cluster = K, f_val = f_val, w = w, lambda = 0.009)
