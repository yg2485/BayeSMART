spot_loc_all <- matrix(ncol = 2, nrow = 0)
each_length <-c()
for (s in 1:6){
filename = paste0(my_dict[[s]], ".RData")
load(filename)
cell_xy <- cell_info[, 1:2]
cell_name <- cell_info$name
count <- spot_count[, -1]
# count <- spot_count[, common_chars]
each_length <- c(each_length, nrow(spot_xy))
V1 <- get.cell.abundance(cell_xy, cell_name, spot_xy, lattice = 'square')
Y1 <- process.gene.expression(count, n_PC = 3, method = 'PCA',d = 734)
G1 <- get.neighbor(spot_xy, 8)
G_orgin <- rbind(G_orgin, G1)
if (s > 1){
non_zero_indices <- G1 != 0
G1[non_zero_indices] <- G1[non_zero_indices] + sum(each_length[1:(s-1)])
}
V <- rbind(V, V1)
G <- rbind(G, G1)
Y <- rbind(Y, Y1)
spot_loc_all = rbind(spot_loc_all, spot_xy)
}
K <- 7
w <- 1/10
result <- run.mIMPACT(V, Y, G, n_cluster = K, w)
spatial_domain <- get.spatial.domain(result)
# plot results
scores = c()
for (s in 1:6){
filename_2 = paste0(my_dict[[s]],"_color.RData")
load(filename_2)
l = each_length[s] ###### revised
if (s == 1){ ######
spots <- spot_loc_all[1:l, ]
domains <- spatial_domain[1:l]
G1 <- G_orgin[1:l, ]
}else{
sum_ = sum(each_length[1: (s-1)])
spots <- spot_loc_all[(sum_ + 1): (sum_ + l), ]
domains <- spatial_domain[(sum_ + 1): (sum_ + l)]
G1 <- G_orgin[(sum_ + 1): (sum_ + l), ]
}
spatial_domain_refined <- refine.cluster(G1, domains, area_unit = 3)
df <- data.frame(x = spots[,1], y = spots[,2], domain = as.factor(spatial_domain_refined))
x_trans <- min(df$x)
y_trans <- min(df$y)
df$x <- df$x - x_trans
df$y <- df$y - y_trans
filename = paste0("/Users/yanghongguo/Desktop/", my_dict[[s]],  ".png")
g <- ggplot(df, aes(x = x, y = y, color = domain)) +
geom_point(size = 2) + scale_color_manual(values=c('1' = "#7DFFFF", '2' = "#FFFF00", '3' = "darkorange", '4' = '#00FF00', '5' = 'red2' , '6' = '#0000FF'))+
coord_cartesian(xlim = c(0, 9000), ylim = c(0, 8000))
ggsave(filename = filename, plot = g, width = 6, height = 4, dpi = 300)
if (length(undefined) == 0){
cluster_sim = spatial_domain_refined
cluster_real = real_region
}else{
cluster_sim = spatial_domain_refined[-undefined]
cluster_real = real_region[-undefined]
}
ari_score <- adjustedRandIndex(cluster_sim, cluster_real)
scores <- c(scores, ari_score)
}
scores
mean(scores)
K <- 5
w <- 1/10
result <- run.mIMPACT(V, Y, G, n_cluster = K, w)
spatial_domain <- get.spatial.domain(result)
# plot results
scores = c()
for (s in 1:6){
filename_2 = paste0(my_dict[[s]],"_color.RData")
load(filename_2)
l = each_length[s] ###### revised
if (s == 1){ ######
spots <- spot_loc_all[1:l, ]
domains <- spatial_domain[1:l]
G1 <- G_orgin[1:l, ]
}else{
sum_ = sum(each_length[1: (s-1)])
spots <- spot_loc_all[(sum_ + 1): (sum_ + l), ]
domains <- spatial_domain[(sum_ + 1): (sum_ + l)]
G1 <- G_orgin[(sum_ + 1): (sum_ + l), ]
}
spatial_domain_refined <- refine.cluster(G1, domains, area_unit = 3)
df <- data.frame(x = spots[,1], y = spots[,2], domain = as.factor(spatial_domain_refined))
x_trans <- min(df$x)
y_trans <- min(df$y)
df$x <- df$x - x_trans
df$y <- df$y - y_trans
filename = paste0("/Users/yanghongguo/Desktop/", my_dict[[s]],  ".png")
g <- ggplot(df, aes(x = x, y = y, color = domain)) +
geom_point(size = 2) + scale_color_manual(values=c('1' = "#7DFFFF", '2' = "#FFFF00", '3' = "darkorange", '4' = '#00FF00', '5' = 'red2' , '6' = '#0000FF'))+
coord_cartesian(xlim = c(0, 9000), ylim = c(0, 8000))
ggsave(filename = filename, plot = g, width = 6, height = 4, dpi = 300)
if (length(undefined) == 0){
cluster_sim = spatial_domain_refined
cluster_real = real_region
}else{
cluster_sim = spatial_domain_refined[-undefined]
cluster_real = real_region[-undefined]
}
ari_score <- adjustedRandIndex(cluster_sim, cluster_real)
scores <- c(scores, ari_score)
}
scores
mean(scores)
w <- 1/20
result <- run.mIMPACT(V, Y, G, n_cluster = K, w)
spatial_domain <- get.spatial.domain(result)
# plot results
scores = c()
for (s in 1:6){
filename_2 = paste0(my_dict[[s]],"_color.RData")
load(filename_2)
l = each_length[s] ###### revised
if (s == 1){ ######
spots <- spot_loc_all[1:l, ]
domains <- spatial_domain[1:l]
G1 <- G_orgin[1:l, ]
}else{
sum_ = sum(each_length[1: (s-1)])
spots <- spot_loc_all[(sum_ + 1): (sum_ + l), ]
domains <- spatial_domain[(sum_ + 1): (sum_ + l)]
G1 <- G_orgin[(sum_ + 1): (sum_ + l), ]
}
spatial_domain_refined <- refine.cluster(G1, domains, area_unit = 3)
df <- data.frame(x = spots[,1], y = spots[,2], domain = as.factor(spatial_domain_refined))
x_trans <- min(df$x)
y_trans <- min(df$y)
df$x <- df$x - x_trans
df$y <- df$y - y_trans
filename = paste0("/Users/yanghongguo/Desktop/", my_dict[[s]],  ".png")
g <- ggplot(df, aes(x = x, y = y, color = domain)) +
geom_point(size = 2) + scale_color_manual(values=c('1' = "#7DFFFF", '2' = "#FFFF00", '3' = "darkorange", '4' = '#00FF00', '5' = 'red2' , '6' = '#0000FF'))+
coord_cartesian(xlim = c(0, 9000), ylim = c(0, 8000))
ggsave(filename = filename, plot = g, width = 6, height = 4, dpi = 300)
if (length(undefined) == 0){
cluster_sim = spatial_domain_refined
cluster_real = real_region
}else{
cluster_sim = spatial_domain_refined[-undefined]
cluster_real = real_region[-undefined]
}
ari_score <- adjustedRandIndex(cluster_sim, cluster_real)
scores <- c(scores, ari_score)
}
scores
mean(scores)
# install.packages("devtools")
options(timeout = 600000000) ### set this to avoid timeout error
devtools::install_github("dmcable/spacexr", build_vignettes = FALSE)
?levels
### Load in/preprocess your data, this might vary based on your file type
refdir <- system.file("extdata",'Reference/Vignette',package = 'spacexr') # directory for the reference
counts <- read.csv(file.path(refdir,"dge.csv")) # load in counts matrix
rownames(counts) <- counts[,1]; counts[,1] <- NULL # Move first column to rownames
meta_data <- read.csv(file.path(refdir,"meta_data.csv")) # load in meta_data (barcodes, clusters, and nUMI)
cell_types <- meta_data$cluster; names(cell_types) <- meta_data$barcode # create cell_types named list
cell_types <- as.factor(cell_types) # convert to factor data type
nUMI <- meta_data$nUMI; names(nUMI) <- meta_data$barcode # create nUMI named list
### Create the Reference object
reference <- Reference(counts, cell_types, nUMI)
library(spacexr)
library(Matrix)
### Create the Reference object
reference <- Reference(counts, cell_types, nUMI)
## Examine reference object (optional)
print(dim(reference@counts)) #observe Digital Gene Expression matrix
#> [1] 384 475
table(reference@cell_types) #number of occurences for each cell type
datadir <- system.file("extdata",'SpatialRNA/Vignette',package = 'spacexr') # directory for sample Slide-seq dataset
counts <- read.csv(file.path(datadir,"MappedDGEForR.csv")) # load in counts matrix
coords <- read.csv(file.path(datadir,"BeadLocationsForR.csv"))
rownames(counts) <- counts[,1]; counts[,1] <- NULL # Move first column to rownames
rownames(coords) <- coords$barcodes; coords$barcodes <- NULL # Move barcodes to rownames
nUMI <- colSums(counts) # In this case, total counts per pixel is nUMI
### Create SpatialRNA object
puck <- SpatialRNA(coords, counts, nUMI)
### Create SpatialRNA object
puck <- SpatialRNA(coords, counts, nUMI)
## Examine SpatialRNA object (optional)
print(dim(puck@counts)) # observe Digital Gene Expression matrix
hist(log(puck@nUMI,2)) # histogram of log_2 nUMI
myRCTD <- create.RCTD(puck, reference, max_cores = 1)
myRCTD <- run.RCTD(myRCTD, doublet_mode = 'doublet')
results <- myRCTD@results
# normalize the cell type proportions to sum to 1.
norm_weights = normalize_weights(results$weights)
setwd("/Users/yanghongguo/Desktop/multisample data/processed/WO-quality-control")
setwd("/Users/yanghongguo/Desktop/Research/iBurst/data/multisample data/processed/WO-quality-control")
color_name <- c("lb","ye", "or","gr","red", "bl")
my_dict <- list("A1", "B1", "C1", "D1", "G1", "H1")
##### to get all the count for each spot
count_all = matrix(NA, nrow = 0, ncol = length(common_chars))
real_region_all <- c() # real region for all spot that has a label
for (s in 1:6){
filename = paste0(my_dict[[s]], ".RData")
load(filename)
filename_2 = paste0(my_dict[[s]],"_color.RData")
load(filename_2)
count <- spot_count[, common_chars]
count_all <- rbind(count_all, count)
real_region_all <- c(real_region_all, real_region)
}
index <- which(real_region_all >=1 & real_region_all <=6)
count_all <- count_all[index,]
real_region_all <- real_region_all[index]
rownames(count_all)
?gsub
setwd("/Users/yanghongguo/Desktop/Research/iBurst/data/bulk decov/breast cancer bulk sequencing and clinical data")
### get matrix Y
library(readxl)
setwd("/Users/yanghongguo/Desktop/Research/iBurst/data/bulk decov/breast cancer bulk sequencing and clinical data")
bulk_data <- read_excel("BRCA.rnaseq__illuminahiseq-Raw-Counts.xlsx")
View(bulk_data)
rownames(bulk_data) <- bulk_data[,1]
View(bulk_data)
class(bulk_data)
bulk_data <- as.matrix(bulk_data)
rownames(bulk_data) <- bulk_data[,1]
bulk_data[,1] <- NULL
rownames(bulk_data) <- bulk_data[,1]; bulk_data[,1] <- NULL
rownames(bulk_data) <- bulk_data[,1]; bulk_data[,-1] <- NULL
refdir <- system.file("extdata",'Reference/Vignette',package = 'spacexr') # directory for the reference
counts <- read.csv(file.path(refdir,"dge.csv")) # load in counts matrix
class(counts)
bulk_data <- as.data.frame(bulk_data)
rownames(bulk_data) <- bulk_data[,1]; bulk_data[,-1] <- NULL
bulk_data <- read_excel("BRCA.rnaseq__illuminahiseq-Raw-Counts.xlsx")
View(bulk_data)
bulk_data[-c(1),]
class(bulk_data)
bulk_data <- bulk_data[-1, ]
rownames(bulk_data) <- bulk_data[[1]]
bulk_data <- as.data.frame(bulk_data)
common_gene <- intersect(bulk_data$`Sample ID`, common_chars)
bulk_data <- bulk_data[bulk_data$`Sample ID` %in% common_gene, ]
rownames(bulk_data) <- bulk_data[[1]]
bulk_data <- bulk_data[,-1]
Y <- bulk_data
## Single-Cell Reference ###################################################
sc_count <- X
X <- count_all[,common_gene]
Y <- bulk_data
## Single-Cell Reference ###################################################
sc_count <- X
counts <- t(as.matrix(sc_count))
cell_types <- as.character(real_region_all)
names(cell_types) <- rownames(count_all)
# cell_types <- gsub("/", "-", cell_types)
table(cell_types)
cell_types <- as.factor(cell_types)
nUMI <- colSums(counts)   # In this case, total counts is nUMI
names(nUMI) <- rownames(count_all)
## Create the Reference object
reference <- Reference(counts, cell_types, nUMI, require_int = FALSE)
View(counts)
X <- count_all[,common_gene]
View(X)
colnames(counts) <- rownames(count_all)
## Create the Reference object
reference <- Reference(counts, cell_types, nUMI, require_int = FALSE)
nUMI
## Examine reference object (optional)
print(dim(reference@counts)) #observe Digital Gene Expression matrix
table(reference@cell_types) #number of occurences for each cell type
## Spatial Transcriptomics data ############################################
st_count <- Y
counts <- as.matrix(st_count)
fake_coords(counts)
## Create SpatialRNA object
puck <- SpatialRNA(NULL, counts, nUMI, use_fake_coords = FALSE)
## Create SpatialRNA object
puck <- SpatialRNA(NULL, counts, nUMI, use_fake_coords = TRUE)
## Spatial Transcriptomics data ############################################
st_count <- Y
counts <- as.matrix(st_count)
coords <- loc
## Create SpatialRNA object
puck <- SpatialRNA(coords, counts, nUMI, use_fake_coords = TRUE)
## Create SpatialRNA object
puck <- SpatialRNA(coords, counts, nUMI = NULL, use_fake_coords = TRUE)
View(counts)
## Create SpatialRNA object
puck <- SpatialRNA(counts, counts, nUMI = NULL, use_fake_coords = TRUE, require_int = TRUE)
?SpatialRNA
## Create SpatialRNA object
puck <- SpatialRNA(coords, counts, nUMI = NULL, use_fake_coords = TRUE, require_int = TRUE)
dim(counts)
class(counts)
all_is_integer <- all(apply(counts, c(1, 2), is.integer))
is.integer(counts[1,1])
class(counts[1,1])
counts <- matrix(as.numeric(as.vector(counts)), nrow=nrow(counts))
## Spatial Transcriptomics data ############################################
st_count <- Y
counts <- matrix(as.numeric(as.vector(st_count)), nrow=nrow(counts))
## Spatial Transcriptomics data ############################################
st_count <- Y
as.vector(st_count)
counts <- as.matrix(st_count)
counts <- matrix(as.numeric(as.vector(st_count)), nrow=nrow(counts))
class(counts)
dim(counts)
counts <- matrix(as.numeric(as.vector(counts)), nrow=nrow(counts))
rownames(counts) <- rownames(st_count)
colnames(counts) <- colnames(st_count)
View(counts)
coords <- NULL
## Create SpatialRNA object
puck <- SpatialRNA(coords, counts, nUMI = NULL, use_fake_coords = TRUE, require_int = TRUE)
fake_coords(counts)
fake_coords <- function(counts) {
coords <- data.frame(as.matrix(Matrix(0,nrow=dim(counts)[2],ncol=2)))
colnames(coords) <- c('x','y')
rownames(coords) <- colnames(counts)
return(coords)
}
fake_coords(counts)
Matrix(0,nrow=dim(counts)[2],ncol=2)
library(Matrix)
fake_coords(counts)
coords <- data.frame(as.matrix(matrix(0,nrow=dim(counts)[2],ncol=2)))
rownames(coords) <- colnames(st_count)
## Create SpatialRNA object
puck <- SpatialRNA(coords, counts, nUMI = NULL, require_int = TRUE)
## Examine SpatialRNA object (optional)
print(dim(puck@counts)) # observe Digital Gene Expression matrix
hist(log(puck@nUMI,2)) # histogram of log_2 nUMI
print(head(puck@coords)) # start of coordinate data.frame
barcodes <- colnames(puck@counts) # pixels to be used (a list of barcode names).
# This list can be restricted if you want to crop the puck e.g.
# puck <- restrict_puck(puck, barcodes) provides a basic plot of the nUMI of each pixel
# on the plot:
plot_puck_continuous(puck, barcodes, puck@nUMI,
ylimit = c(0,round(quantile(puck@nUMI,0.9))),
title ='plot of nUMI')
## Creating RCTD Object ####################################################
myRCTD <- create.RCTD(puck, reference)
?get_de_genes
cell_type_info <- list(info = process_cell_type_info(reference, cell_type_names = cell_type_names, CELL_MIN = CELL_MIN_INSTANCE), renorm = NULL)
puck.original = restrict_counts(spatialRNA, rownames(spatialRNA@counts),
UMI_thresh = config$UMI_min, UMI_max = config$UMI_max,
counts_thresh = config$counts_MIN)
puck.original = restrict_counts(puck, rownames(spatialRNA@counts),
UMI_thresh = config$UMI_min, UMI_max = config$UMI_max,
counts_thresh = config$counts_MIN)
puck.original = restrict_counts(puck, rownames(puck@counts))
bulk_vec = rowSums(puck@counts)
## Creating RCTD Object ####################################################
myRCTD <- create.RCTD(puck, reference)
rownames(puck@counts)
rownames(reference@counts)
rownames(puck@counts) == rownames(reference@counts)
## Creating RCTD Object ####################################################
myRCTD <- create.RCTD(puck, reference)
all(rownames(puck@counts) == rownames(reference@counts))
process_cell_type_info <- function(reference, cell_type_names, CELL_MIN = 25) {
message("Begin: process_cell_type_info")
message(paste("process_cell_type_info: number of cells in reference:", dim(reference@counts)[2]))
message(paste("process_cell_type_info: number of genes in reference:", dim(reference@counts)[1]))
cell_counts = table(reference@cell_types)
print(cell_counts)
if(min(cell_counts) < CELL_MIN)
stop(paste0("process_cell_type_info error: need a minimum of ",CELL_MIN, " cells for each cell type in the reference"))
cell_type_info <- get_cell_type_info(reference@counts, reference@cell_types, reference@nUMI
, cell_type_names = cell_type_names)
message("End: process_cell_type_info")
return(cell_type_info)
}
cell_type_info <- list(info = process_cell_type_info(reference, cell_type_names = cell_type_names, CELL_MIN = CELL_MIN_INSTANCE), renorm = NULL)
cell_type_info <- list(info = process_cell_type_info(reference, cell_type_names = levels(reference@cell_types), CELL_MIN = 25), renorm = NULL)
cell_type_info$info
gene_list_reg = get_de_genes(cell_type_info$info, puck.original)
total_gene_list = c()
epsilon = 1e-9
bulk_vec = rowSums(puck.original@counts)
cell_type_info <- cell_type_info$info
gene_list = rownames(cell_type_info[[1]])
prev_num_genes <- min(length(gene_list), length(names(bulk_vec)))
if(length(grep("mt-",gene_list)) > 0)
gene_list = gene_list[-grep("mt-",gene_list)]
gene_list = intersect(gene_list,names(bulk_vec))
if(length(gene_list) == 0)
stop("get_de_genes: Error: 0 common genes between SpatialRNA and Reference objects. Please check for gene list nonempty intersection.")
gene_list = gene_list[bulk_vec[gene_list] >= MIN_OBS]
gene_list = gene_list[bulk_vec[gene_list] >= 3]
bulk_vec
bulk_vec = rowSums(puck.original@counts)
puck.original@counts
puck.original = restrict_counts(puck, rownames(puck@counts))
gene_list <- rownames(puck@counts)
counts_tot <- colSums(puck@counts[gene_list,])
keep_loc = (puck@nUMI >= UMI_thresh) & (puck@nUMI <= UMI_max) & (counts_tot >= counts_thresh)
UMI_thresh = 1
UMI_max = 20000
counts_thresh = 1
keep_loc = (puck@nUMI >= UMI_thresh) & (puck@nUMI <= UMI_max) & (counts_tot >= counts_thresh)
puck@counts = puck@counts[gene_list,keep_loc]
puck@nUMI
colSums(Y)
colSums(counts)
min(colSums(counts))
max(colSums(counts))
## Creating RCTD Object ####################################################
myRCTD <- create.RCTD(puck, reference, UMI_max = 149540272)
## Create SpatialRNA object
puck <- SpatialRNA(coords, counts, nUMI = NULL, require_int = TRUE)
## Creating RCTD Object ####################################################
myRCTD <- create.RCTD(puck, reference, UMI_max = 149540272)
marker_gene_data <- data.frame("gene" = myRCTD@internal_vars$gene_list_bulk)
## Running RCTD ############################################################
start_time = proc.time()
myRCTD <- run.RCTD(myRCTD, doublet_mode = "doublet")
RCTD <- myRCTD
doublet_mode = "doublet"
RCTD@config$RCTDmode <- doublet_mode
RCTD <- fitBulk(RCTD)
RCTD <- choose_sigma_c(RCTD)
RCTD <- fitPixels(RCTD, doublet_mode = doublet_mode)
?choose_sigma_c
puck = RCTD@spatialRNA; MIN_UMI = RCTD@config$UMI_min_sigma; sigma = 100
#Q_mat_all <- readRDS('/Users/dcable/Documents/MIT/Research/Rafalab/Projects/slideseq/Cell Demixing/ContentStructure/RCTD/Qmat/Q_mat_c.rds')
Q1 <- readRDS(system.file("extdata", "Qmat/Q_mat_1.rds", package = "spacexr"))
Q2 <- readRDS(system.file("extdata", "Qmat/Q_mat_2.rds", package = "spacexr"))
Q3 <- readRDS(system.file("extdata", "Qmat/Q_mat_3.rds", package = "spacexr"))
Q4 <- readRDS(system.file("extdata", "Qmat/Q_mat_4.rds", package = "spacexr"))
Q5 <- readRDS(system.file("extdata", "Qmat/Q_mat_5.rds", package = "spacexr"))
Q_mat_all <- c(Q1, Q2, Q3, Q4, Q5)
sigma_vals <- names(Q_mat_all)
#X_vals <- readRDS('/Users/dcable/Documents/MIT/Research/Rafalab/Projects/slideseq/Cell Demixing/ContentStructure/RCTD/Qmat/X_vals.rds')
X_vals <- readRDS(system.file("extdata", "Qmat/X_vals.rds", package = "spacexr"))
#get initial classification
N_fit = min(RCTD@config$N_fit,sum(puck@nUMI > MIN_UMI))
if(N_fit == 0) {
stop(paste('choose_sigma_c determined a N_fit of 0! This is probably due to unusually low UMI counts per bead in your dataset. Try decreasing the parameter UMI_min_sigma. It currently is',MIN_UMI,'but none of the beads had counts larger than that.'))
}
fit_ind = sample(names(puck@nUMI[puck@nUMI > MIN_UMI]), N_fit)
beads = t(as.matrix(puck@counts[RCTD@internal_vars$gene_list_reg,fit_ind]))
message(paste('chooseSigma: using initial Q_mat with sigma = ',sigma/100))
for(iter in 1:RCTD@config$N_epoch) {
set_likelihood_vars(Q_mat_all[[as.character(sigma)]], X_vals)
#message(paste('chooseSigma: getting initial weights for #samples: ',N_fit))
results = decompose_batch(puck@nUMI[fit_ind], RCTD@cell_type_info$renorm[[1]], beads, RCTD@internal_vars$gene_list_reg, constrain = F, max_cores = RCTD@config$max_cores)
weights = Matrix(0, nrow = N_fit, ncol = RCTD@cell_type_info$renorm[[3]])
rownames(weights) = fit_ind; colnames(weights) = RCTD@cell_type_info$renorm[[2]];
for(i in 1:N_fit)
weights[i,] = results[[i]]$weights
prediction <- sweep(as.matrix(RCTD@cell_type_info$renorm[[1]][RCTD@internal_vars$gene_list_reg,]) %*% t(as.matrix(weights)), 2, puck@nUMI[fit_ind], '*')
message(paste('Likelihood value:',calc_log_l_vec(as.vector(prediction), as.vector(t(beads)))))
sigma_prev <- sigma
sigma <- chooseSigma(prediction, t(beads), Q_mat_all, X_vals, sigma)
message(paste('Sigma value: ', sigma/100))
if(sigma == sigma_prev)
break
}
RCTD <- choose_sigma_c(RCTD)
?decompose_batch
decompose_batch <- function(nUMI, cell_type_means, beads, gene_list, constrain = T, OLS = F, max_cores = 8, MIN.CHANGE = 0.001) {
#out_file = "logs/decompose_batch_log.txt"
#if (file.exists(out_file))
#  file.remove(out_file)
if(max_cores > 1) {
numCores = parallel::detectCores()
if(parallel::detectCores() > max_cores)
numCores <- max_cores
cl <- parallel::makeCluster(numCores,setup_strategy = "sequential",outfile="")
doParallel::registerDoParallel(cl)
environ = c('decompose_full','solveIRWLS.weights',
'solveOLS','solveWLS', 'Q_mat', 'K_val','X_vals', 'SQ_mat')
#for(i in 1:100) {
weights <- foreach::foreach(i = 1:(dim(beads)[1]), .packages = c("quadprog"), .export = environ) %dopar% {
#if(i %% 100 == 0)
#  cat(paste0("Finished sample: ",i,"\n"), file=out_file, append=TRUE)
assign("Q_mat",Q_mat, envir = globalenv()); assign("X_vals",X_vals, envir = globalenv())
assign("K_val",K_val, envir = globalenv()); assign("SQ_mat",SQ_mat, envir = globalenv());
decompose_full(data.matrix(cell_type_means[gene_list,]*nUMI[i]), nUMI[i], beads[i,], constrain = constrain, OLS = OLS, MIN_CHANGE = MIN.CHANGE)
}
parallel::stopCluster(cl)
} else {
weights <- list()
for(i in 1:(dim(beads)[1])) {
weights[[i]] <- decompose_full(data.matrix(cell_type_means[gene_list,]*nUMI[i]), nUMI[i], beads[i,], constrain = constrain, OLS = OLS, MIN_CHANGE = MIN.CHANGE)
}
}
return(weights)
}
for(iter in 1:RCTD@config$N_epoch) {
set_likelihood_vars(Q_mat_all[[as.character(sigma)]], X_vals)
#message(paste('chooseSigma: getting initial weights for #samples: ',N_fit))
results = decompose_batch(puck@nUMI[fit_ind], RCTD@cell_type_info$renorm[[1]], beads, RCTD@internal_vars$gene_list_reg, constrain = F, max_cores = RCTD@config$max_cores)
weights = Matrix(0, nrow = N_fit, ncol = RCTD@cell_type_info$renorm[[3]])
rownames(weights) = fit_ind; colnames(weights) = RCTD@cell_type_info$renorm[[2]];
for(i in 1:N_fit)
weights[i,] = results[[i]]$weights
prediction <- sweep(as.matrix(RCTD@cell_type_info$renorm[[1]][RCTD@internal_vars$gene_list_reg,]) %*% t(as.matrix(weights)), 2, puck@nUMI[fit_ind], '*')
message(paste('Likelihood value:',calc_log_l_vec(as.vector(prediction), as.vector(t(beads)))))
sigma_prev <- sigma
sigma <- chooseSigma(prediction, t(beads), Q_mat_all, X_vals, sigma)
message(paste('Sigma value: ', sigma/100))
if(sigma == sigma_prev)
break
}
weights = Matrix(0, nrow = N_fit, ncol = RCTD@cell_type_info$renorm[[3]])
remove.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
myRCTD <- run.RCTD(myRCTD, doublet_mode = "doublet")
library(Matrix)
